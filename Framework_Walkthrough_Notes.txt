Selenium Hybrid Framework:
(Python, Selenium, PyTest, Page Object Model, HTML Reports)

Built-in frameworks:
 _pytest, unittest, robotframework

Customized/User defined framework:
 _Datadriven framework, Keyword drvien framework, Hybrid driven framework

Phases:
1. Analyse applciation, Technology & Skill Set, Choose Test Cases-Smoke, Sanity, Regression, Tests to be/ not to be automate
2. Design & Implementation for framework
3. Execution
4. Maintanance(Version Control & CI/CD)

FrontEnd: https://demo.nopcommerce.com/
BackEnd: https://admin-demo.nopcommerce.com
    email: admin@yourstore.com
    password: admin

Step 1: Create new Project & Install required packages/plugins
	Selenium: Selenium Libraries
	pyTest: UnitTest Framework
	pytest-html: HTML Reports
	pytest-xdist: Run Tests Parallel
	Openpyxl: MS Excel Support
	Allure-pytest: To generate allure reports

Step 2: Create Folder Structure
	ProjectName
		_pageObjects(package)
		_testCases(package)
		_utilities (package)
		_TestData (Folder)
		_Configuration (Folder)
		_Logs (Folder)
		_Screenshots(Folder)
		_Reports
		_Run.bat

Step 3: Automating Login Test Case
	3.1 Create LoginPage Object Class under "pageObjects"
	3.2 Create LoginTest under "testCases"
	3.3 Create conftest.py under "testCases"

Step 4: Capture screenshot on failures
	4.1 Update Login Test with Screenshot under "testCases"

Step 5: Read common values from .ini file
	5.1 Add "config.ini" file in "Configurations" folder
	5.2 Create "readProperties.py" utility file under utlities package to read common data.
	5.3 Replace hard-coded values in Login test case

Step 6: Adding logs to test case
	6.1 Add customLogger.py under utilities package
	6.2 Add logs to Login test case

Step 7: Run tests on Desired Browser/Cross Browser/Parallel
	7.1 Update contest.py with required Fixtures which will accept command line argument(browser)
	7.2 Pass browser name as argument in command line

To run tests on desired browser
	pytest -s -v testCases/test_login.py --browser chrome
	pytest -s -v testCases/test_login.py --browser firefox

To run tests parallel
	pytest -s -v -n=3 testCases/test_login.py --browser chrome
	pytest -s -v -n=3 testCases/test_login.py --browser firefox

Step 8: Generate pytest HTML Reports
	8.1: Update conftest.py with pytest hooks
	8.2: To generate HTML report run below command
		pyest -s -v --html=Reports\report.html testCases/test_login.py --browser chrome

Step 9: Automating Data Driven TestCase
	9.1: Prepare test data in Excel sheet, place the excel file inside the TestData folder
	9.2: Create "ExcelUtils.py" utility class under utilities package
	9.3: Create LoginDataDrivenTest under testCases
	9.4: Run the test case

Step 10: Adding new test cases
	1. Add new customer
	2. Search customer by email
	3. Search customer by name

***Note: Steps 1-10 are Design and Implementation of framework related and it's done.

Step 11: Grouping Tests
	11.1: Grouping markers (Add markers to every test method)
		@pytest.mark.sanity
		@pytest.mark.regression
	11.2: Add Marker entries in pytest.ini file
		pytest.ini:
		[pytest]
		markers =
		sanity
		regression
	11.3 Select groups at run time
		-m "sanity"
		-m "regression"
		-m "sanity and regression"
		-m "sanity or regression"

	Run command:
	pytest -s -v -m "sanity or regression" --html=./Reports/report.html testCases/test_login.py --browser chrome

Step 12: Run tests in Command Prompt & run.bat file
	12.1: Create run.bat file and enter following
		pytest -s -v -m "sanity" --html=./Reports/report.html testCases/test_sample.py --browser chrome
		rem pytest -s -v -m "smoke" --html=./Reports/report.html testCases/test_sample.py --browser chrome
		rem pytest -s -v -m "regression" --html=./Reports/report.html testCases/test_sample.py --browser chrome
		rem pytest -s -v -m "smoke and regression" --html=./Reports/report.html testCases/test_sample.py --browser chrome
		rem pytest -s -v -m "sanity and regression" --html=./Reports/report.html testCases/test_sample.py --browser chrome
	12.2: Open command prompt as Adminstrator and then run run.bat file
		(.venv) C:\WorkspacePython\python-hybrid-framework>run.bat

Step 13: Push the code to Git&GitHub Repository		
	https://github.com/testmywork77/WorkspacePython.git
	
Step 14: Run Tests using Jenkins CI/CD
	Jenkins War file:
		C:\Jenkins\jenkins.war

		java -jar jenkins.war
		java -jar jenkins.war --httpPort=9090
		java -jar jenkins.war --httpsPort=9090
	
	Jenkins Installed:
		C:\Program Files (x86)\Jenkins
		
		How to run Installed Jenkins:
		In Control Panel\System and Security\Administrative Tools\ -> Click on "Services"



$ pytest -s -v -m "sanity" --html=./Reports/report.html testCases/test_sample.py --browser chrome




